diff --git a/fontforge/charview.c b/fontforge/charview.c
index afa6e47..cf8bb3a 100644
--- a/fontforge/charview.c
+++ b/fontforge/charview.c
@@ -107,6 +107,8 @@ struct cvshows CVShows = {
 	1,		/* Check for self-intersections in the element view */
 	1		/* In tt debugging, mark changed rasters differently */
 };
+struct cvshows CVShowsPrevewToggleSavedState;
+
 static Color pointcol = 0xff0000;
 static Color firstpointcol = 0x707000;
 static Color selectedpointcol = 0xc8c800;
@@ -3020,6 +3026,10 @@ static void CVDoFindInFontView(CharView *cv) {
     GDrawRaise(((FontView *) (cv->b.fv))->gw);
 }
 
+static uint16 HaveModifiers = 0;
+static uint16 PressingTilde = 0;
+static uint16 PrevCharEventWasCharUpOnControl = 0;
+
 static void CVCharUp(CharView *cv, GEvent *event ) {
 
     #if defined(__MINGW32__)
@@ -3027,6 +3037,47 @@ static void CVCharUp(CharView *cv, GEvent *event ) {
 	_mingw_hand_tool_hack(cv);
     #endif
 
+    if( !cv_auto_goto )
+    {
+	if( event->u.chr.keysym=='`' ) {
+	    PressingTilde = 1;
+	}
+
+	if( PrevCharEventWasCharUpOnControl
+	    && event->u.chr.keysym=='`' )
+	{
+	    HaveModifiers = 0;
+	    PrevCharEventWasCharUpOnControl = 0;
+	    return;
+	}
+	PrevCharEventWasCharUpOnControl = 0;
+	
+	if( !event->u.chr.autorepeat
+	    && (event->u.chr.keysym == GK_Control_L
+		|| event->u.chr.keysym == GK_Control_R ))
+	{
+	    PrevCharEventWasCharUpOnControl = 1;
+	    if( !PressingTilde ) {
+		HaveModifiers = 0;
+	    }
+	}
+	
+	if ( !event->u.chr.autorepeat && !HaveModifiers && event->u.chr.keysym=='`' ) {
+	    PressingTilde = 0;
+	    CVPreviewModeSet( cv->gw, false );
+	    return;
+	}
+	
+	if ( !event->u.chr.autorepeat && event->u.chr.keysym=='`' ) {
+	    PressingTilde = 0;
+	}
+	if ( event->u.chr.autorepeat && HaveModifiers && event->u.chr.keysym=='`' ) {
+	    return;
+	}
+    }
+    
+    
+    
 #if _ModKeysAutoRepeat
     /* Under cygwin these keys auto repeat, they don't under normal X */
     if ( event->u.chr.keysym == GK_Shift_L || event->u.chr.keysym == GK_Shift_R ||
@@ -4999,6 +5050,7 @@ return( true );
 #define MID_Next	2007
 #define MID_Prev	2008
 #define MID_HideRulers	2009
+#define MID_Preview     2010
 #define MID_NextDef	2012
 #define MID_PrevDef	2013
 #define MID_DisplayCompositions	2014
@@ -5706,6 +5758,111 @@ static void CVMenuFill(GWindow gw,struct gmenuitem *mi,GEvent *e) {
     GDrawRequestExpose(cv->v,NULL,false);
 }
 
+static struct cvshows* cvshowsCopyTo( struct cvshows* dst, CharView* src ) 
+{
+    dst->showfore = src->showfore;
+    dst->showgrids = src->showgrids;
+    dst->showhhints = src->showhhints;
+    dst->showvhints = src->showvhints;
+    dst->showdhints = src->showdhints;
+    dst->showpoints = src->showpoints;
+    dst->showfilled = src->showfilled;
+    dst->showrulers = src->showrulers;
+    dst->showrounds = src->showrounds;
+    dst->showmdx = src->showmdx;
+    dst->showmdy = src->showmdy;
+    dst->showhmetrics = src->showhmetrics;
+    dst->showvmetrics = src->showvmetrics;
+    dst->markextrema = src->markextrema;
+    dst->markpoi = src->markpoi;
+    dst->showblues = src->showblues;
+    dst->showfamilyblues = src->showfamilyblues;
+    dst->showanchor = src->showanchor;
+    dst->showcpinfo = src->showcpinfo;
+    dst->showtabs = src->showtabs;
+    dst->showsidebearings = src->showsidebearings;
+    dst->showrefnames = src->showrefnames;
+    dst->snapoutlines = src->snapoutlines;
+    dst->showalmosthvlines = src->showalmosthvlines;
+    dst->showalmosthvcurves = src->showalmosthvcurves;
+    dst->hvoffset = src->hvoffset;
+    dst->checkselfintersects = src->checkselfintersects;
+    dst->showdebugchanges = src->showdebugchanges;
+    return dst;
+}
+static CharView* cvshowsCopyFrom( CharView* dst, struct cvshows* src ) 
+{
+    dst->showfore = src->showfore;
+    dst->showgrids = src->showgrids;
+    dst->showhhints = src->showhhints;
+    dst->showvhints = src->showvhints;
+    dst->showdhints = src->showdhints;
+    dst->showpoints = src->showpoints;
+    dst->showfilled = src->showfilled;
+    dst->showrulers = src->showrulers;
+    dst->showrounds = src->showrounds;
+    dst->showmdx = src->showmdx;
+    dst->showmdy = src->showmdy;
+    dst->showhmetrics = src->showhmetrics;
+    dst->showvmetrics = src->showvmetrics;
+    dst->markextrema = src->markextrema;
+    dst->markpoi = src->markpoi;
+    dst->showblues = src->showblues;
+    dst->showfamilyblues = src->showfamilyblues;
+    dst->showanchor = src->showanchor;
+    dst->showcpinfo = src->showcpinfo;
+    dst->showtabs = src->showtabs;
+    dst->showsidebearings = src->showsidebearings;
+    dst->showrefnames = src->showrefnames;
+    dst->snapoutlines = src->snapoutlines;
+    dst->showalmosthvlines = src->showalmosthvlines;
+    dst->showalmosthvcurves = src->showalmosthvcurves;
+    dst->hvoffset = src->hvoffset;
+    dst->checkselfintersects = src->checkselfintersects;
+    dst->showdebugchanges = src->showdebugchanges;
+    return dst;
+}
+
+void CVPreviewModeSet(GWindow gw, int checked ) {
+    CharView *cv = (CharView *) GDrawGetUserData(gw);
+    if( checked && cv->inPreviewMode )
+        return;
+
+    cv->inPreviewMode = checked;
+    if( checked ) {
+        cvshowsCopyTo( &CVShowsPrevewToggleSavedState, cv );
+        cv->showfore   = 1;
+        cv->showgrids  = 0;
+        cv->showhhints = 0;
+        cv->showvhints = 0;
+        cv->showdhints = 0;
+        cv->showpoints = 0;
+        cv->showfilled = 1;
+        cv->showrounds = 0;
+        cv->showanchor = 0;
+        cv->showrefnames = 0;
+        cv->showhmetrics = 0;
+        cv->showvmetrics = 0;
+    } else {
+        cvshowsCopyFrom( cv, &CVShowsPrevewToggleSavedState );
+    }
+    CVRegenFill(cv);
+    GDrawRequestExpose(cv->v,NULL,false);
+}
+
+
+                                    
+static void CVMenuPreview(GWindow gw,struct gmenuitem *mi,GEvent *e) {
+    CharView *cv = (CharView *) GDrawGetUserData(gw);
+    int checked = mi->ti.checked;
+
+    if( !cv_auto_goto ) {
+	if( !HaveModifiers )
+	    return;
+    }
+    CVPreviewModeSet( gw, checked );
+}
+
 static void CVMenuShowGridFit(GWindow gw,struct gmenuitem *mi,GEvent *e) {
     CharView *cv = (CharView *) GDrawGetUserData(gw);
 
@@ -5947,6 +6104,20 @@ void CVChar(CharView *cv, GEvent *event ) {
     extern float arrowAmount, arrowAccelFactor;
     extern int navigation_mask;
 
+    if( !cv_auto_goto ) {
+	if( event->u.chr.keysym == GK_Control_L
+	    || event->u.chr.keysym == GK_Control_R )
+	{
+	    HaveModifiers = 1;
+	}
+	
+	if( !HaveModifiers && event->u.chr.keysym=='`' ) {
+	    PressingTilde = 1;
+	    CVPreviewModeSet( cv->gw, true );
+	    return;
+	}
+    }
+	
 #if _ModKeysAutoRepeat
 	/* Under cygwin these keys auto repeat, they don't under normal X */
 	if ( cv->autorpt!=NULL ) {
@@ -9841,6 +10227,7 @@ static GMenuItem2 swlist[] = {
     { { (unichar_t *) N_("_Side Bearings"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 1, 0, 0, 0, 1, 1, 0, 'M' }, H_("Side Bearings|No Shortcut"), NULL, NULL, CVMenuShowSideBearings, MID_ShowSideBearings },
     { { (unichar_t *) N_("Reference Names"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 1, 0, 0, 0, 1, 1, 0, 'M' }, H_("Reference Names|No Shortcut"), NULL, NULL, CVMenuShowRefNames, MID_ShowRefNames },
     { { (unichar_t *) N_("_Fill"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 1, 0, 0, 0, 1, 1, 0, 'l' }, H_("Fill|No Shortcut"), NULL, NULL, CVMenuFill, MID_Fill },
+    { { (unichar_t *) N_("Previe_w"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 1, 0, 0, 0, 1, 1, 0, 'l' }, H_("Preview|Ctl+`"), NULL, NULL, CVMenuPreview, MID_Preview },
     { { NULL, NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 0, 0, 0, 1, }},
     { { (unichar_t *) N_("Pale_ttes"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 0, 0, 0, 0, 1, 1, 0, 'P' }, NULL, pllist, pllistcheck },
     { { (unichar_t *) N_("_Glyph Tabs"), NULL, COLOR_DEFAULT, COLOR_DEFAULT, NULL, NULL, 0, 1, 1, 0, 0, 0, 1, 1, 0, 'R' }, H_("Glyph Tabs|No Shortcut"), NULL, NULL, CVMenuShowTabs, MID_ShowTabs },
@@ -10125,7 +10512,7 @@ static void _CharViewCreate(CharView *cv, SplineChar *sc, FontView *fv,int enc)
     cv->showanchor = CVShows.showanchor;
     cv->showcpinfo = CVShows.showcpinfo;
     cv->showtabs = CVShows.showtabs;
-
+    cv->inPreviewMode = 0;
     cv->checkselfintersects = CVShows.checkselfintersects;
 
     cv->showdebugchanges = CVShows.showdebugchanges;
diff --git a/fontforge/prefs.c b/fontforge/prefs.c
index 4bf7426..95c33cf 100644
--- a/fontforge/prefs.c
+++ b/fontforge/prefs.c
@@ -302,10 +305,10 @@ static struct prefs_list {
 	{ N_("PreserveTables"), pr_string, &SaveTablesPref, NULL, NULL, 'P', NULL, 0, N_("Enter a list of 4 letter table tags, separated by commas.\nFontForge will make a binary copy of these tables when it\nloads a True/OpenType font, and will output them (unchanged)\nwhen it generates the font. Do not include table tags which\nFontForge thinks it understands.") },
 	{ N_("SeekCharacter"), pr_unicode, &home_char, NULL, NULL, '\0', NULL, 0, N_("When fontforge opens a (non-sfd) font it will try to display this unicode character in the fontview.")},
 	{ N_("CompactOnOpen"), pr_bool, &compact_font_on_open, NULL, NULL, 'O', NULL, 0, N_("When a font is opened, should it be made compact?")},
 	{ NULL }
 },
   navigation_list[] = {
-	{ N_("GlyphAutoGoto"), pr_bool, &cv_auto_goto, NULL, NULL, '\0', NULL, 0, N_("Typing a normal character in the glyph view window changes the window to look at that character") },
+	{ N_("GlyphAutoGoto"), pr_bool, &cv_auto_goto, NULL, NULL, '\0', NULL, 0, N_("Typing a normal character in the glyph view window changes the window to look at that character.\nEnabling GlyphAutoGoto will disable the shortcut where holding just the ` key will enable Preview mode as long as the key is held.") },
 	{ N_("OpenCharsInNewWindow"), pr_bool, &OpenCharsInNewWindow, NULL, NULL, '\0', NULL, 0, N_("When double clicking on a character in the font view\nopen that character in a new window, otherwise\nreuse an existing one.") },
 	{ NULL }
 },
diff --git a/fontforge/views.h b/fontforge/views.h
index b726ccf..cac0cf4 100644
--- a/fontforge/views.h
+++ b/fontforge/views.h
@@ -164,6 +164,7 @@ typedef struct charview {
     unsigned int showalmosthvcurves: 1;
     unsigned int checkselfintersects: 1;
     unsigned int showdebugchanges: 1;
+    unsigned int inPreviewMode: 1;
     int hvoffset;		/* for showalmosthvlines */
     int layers_off_top;
     real scale;
diff --git a/gdraw/gxdraw.c b/gdraw/gxdraw.c
index d409ca1..04ac105 100644
--- a/gdraw/gxdraw.c
+++ b/gdraw/gxdraw.c
@@ -3471,6 +3471,7 @@ return;
 	gevent.type = event->type==KeyPress?et_char:et_charup;
 	gevent.u.chr.time = event->xkey.time;
 	gevent.u.chr.state = event->xkey.state;
+	gevent.u.chr.autorepeat = 0;
 /*#ifdef __Mac*/
 	/* On mac os x, map the command key to the control key. So Comand-Q=>^Q=>Quit */
 	/* No... don't. Let the user have access to the command key as distinct from control */
@@ -3559,6 +3560,20 @@ return;
 	    gevent.u.chr.keysym = keysym;
 	    gevent.u.chr.chars[0] = '\0';
 	}
+	/*
+	 * If we are a charup, but the very next XEvent is a chardown
+	 * on the same key, then we are just an autorepeat XEvent which
+	 * other code might like to ignore
+	 */
+	if ( gevent.type==et_charup && XEventsQueued(gdisp->display, QueuedAfterReading)) {
+	    XEvent nev;
+	    XPeekEvent(gdisp->display, &nev);
+	    if (nev.type == KeyPress && nev.xkey.time == event->xkey.time &&
+		nev.xkey.keycode == event->xkey.keycode)
+	    {
+		gevent.u.chr.autorepeat = 1;
+	    }
+	}
       break;
       case ButtonPress: case ButtonRelease: case MotionNotify:
 	if ( expecting_core && gdisp->last_event_time==event->xbutton.time )
diff --git a/inc/gdraw.h b/inc/gdraw.h
index 7eedc67..3afe712 100644
--- a/inc/gdraw.h
+++ b/inc/gdraw.h
@@ -141,6 +141,7 @@ typedef struct gevent {
 	    uint16 state;
 	    int16 x,y;
 	    uint16 keysym;
+	    int16 autorepeat;
 	    unichar_t chars[_GD_EVT_CHRLEN];
 	} chr;
 	struct {
